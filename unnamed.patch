Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 15b7d6040ddf180b364685b4e0c2116b407c2e99)
+++ b/main.py	(date 1640117045117)
@@ -34,7 +34,6 @@
 
 
 def calc_performance_modifier(perf_level: int):
-    perf_bonus = 0
     if 2 <= perf_level < 2.5:
         perf_bonus = 0.25
     elif 2.5 <= perf_level < 3:
@@ -49,16 +48,16 @@
 
 
 def calc_bonus(salary: int, level: int, perf_level: decimal) -> float:
-    if salary is not int or level is not int:
+    if salary is None or level is None or perf_level is None:
+        raise NullAgrumentException("Один из входных параметров не определён")
+    if not isinstance(salary, int) or not isinstance(level, int):
         raise TypeError("Введены данные некорректного формата")
-    if salary < 70000 or 750000 < level:
+    if salary < 70000 or 750000 < salary:
         raise ValueError("Зарплата не соответствует диапазону")
     if level < 7 or 15 < level:
         raise ValueError("Недопустимый уровень инженера")
     if perf_level < 1 or 5 < perf_level:
         raise ValueError("Неверное значение Performance Review")
-    if salary is None or level is None or perf_level is None:
-        raise NullAgrumentException("Один из входных параметров не определён")
     level_modifier = calc_level_modifier(level)
     perf_modifier = calc_performance_modifier(perf_level)
 
@@ -67,5 +66,4 @@
 
 
 class NullAgrumentException(Exception):
-    def __init__(self, message):
-        self.message = message
+    pass
Index: test_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test_main.py b/test_main.py
--- a/test_main.py	(revision 15b7d6040ddf180b364685b4e0c2116b407c2e99)
+++ b/test_main.py	(date 1640116993445)
@@ -1,6 +1,3 @@
-import _pytest
-from allpairspy import AllPairs
-
 import main
 import pytest
 
@@ -10,29 +7,38 @@
     assert 20000 == result
 
 
-def test_incorrect_value_value_error():
-    with pytest.raises(ValueError):
-        main.calc_bonus(70000, 10, 4)
+@pytest.mark.parametrize(
+    "salary, level, perf_level, expected_msg",
+    [
+        (69999, 10, 4, "Зарплата не соответствует диапазону"),
+        (750001, 10, 4, "Зарплата не соответствует диапазону"),
+        (85000, 6, 4, "Недопустимый уровень инженера"),
+        (85000, 16, 4, "Недопустимый уровень инженера"),
+        (85000, 10, 0, "Неверное значение Performance Review"),
+        (85000, 10, 6, "Неверное значение Performance Review"),
+    ]
+)
+def test_incorrect_value_value_error(salary, level, perf_level, expected_msg):
+    with pytest.raises(ValueError, match=expected_msg):
+        main.calc_bonus(salary, level, perf_level)
 
 
 def test_incorrect_type_type_error():
-    with pytest.raises(TypeError):
+    with pytest.raises(TypeError, match="Введены данные некорректного формата"):
         main.calc_bonus("adad", 10, 5)
 
 
-null_exception_test_preset = [
-    dict(salary=None, level=10, perf_level=4),
-    dict(salary=75000, level=None, perf_level=4),
-    dict(salary=75000, level=10, perf_level=None)
-]
-
-
-@pytest.mark.parametrize("preset", null_exception_test_preset)
-def test_null_argument_null_argument_exception(preset):
-    with pytest.raises(main.NullAgrumentException):
-        main.calc_bonus(salary=preset.get("salary"),
-                        level=preset.get("level"),
-                        perf_level=preset.get("perf_level"))
+@pytest.mark.parametrize(
+    "salary, level, perf_level",
+    [
+        (None, 10, 4),
+        (75000, None, 4),
+        (75000, 10, None),
+    ]
+)
+def test_null_argument_null_argument_exception(salary, level, perf_level):
+    with pytest.raises(main.NullAgrumentException, match="Один из входных параметров не определён"):
+        main.calc_bonus(salary=salary, level=level, perf_level=perf_level)
 
 
 """Граничные значения зарплаты"""
